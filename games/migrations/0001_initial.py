# Generated by Django 4.0.3 on 2022-08-09 16:57

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConfigScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_name', models.CharField(max_length=100, verbose_name='config name')),
                ('allowed_melee', models.BooleanField(default=True, verbose_name='allow melee')),
                ('allowed_thrown', models.BooleanField(default=True, verbose_name='allow thrown')),
                ('allowed_ranged', models.BooleanField(default=True, verbose_name='allow ranged')),
                ('allowed_animal', models.BooleanField(default=True, verbose_name='allow animal')),
                ('allowed_costume', models.BooleanField(default=True, verbose_name='allow costume')),
                ('points_melee', models.PositiveSmallIntegerField(default=10, verbose_name='melee points')),
                ('points_thrown', models.PositiveSmallIntegerField(default=5, verbose_name='thrown points')),
                ('points_ranged', models.PositiveSmallIntegerField(default=5, verbose_name='ranged points')),
                ('points_animal', models.PositiveSmallIntegerField(default=10, verbose_name='animal points')),
                ('points_costume', models.PositiveSmallIntegerField(default=10, verbose_name='costume points')),
                ('allowed_normal', models.BooleanField(default=True, verbose_name='allow normal')),
                ('allowed_raid', models.BooleanField(default=True, verbose_name='allow raids')),
                ('allowed_duel', models.BooleanField(default=True, verbose_name='allow duels')),
                ('points_normal', models.PositiveSmallIntegerField(default=0, verbose_name='normal bonus')),
                ('points_raid', models.PositiveSmallIntegerField(default=0, verbose_name='raid bonus')),
                ('points_duel', models.PositiveSmallIntegerField(default=0, verbose_name='duel bonus')),
                ('allowed_indirect', models.BooleanField(default=True, verbose_name='allow indirect')),
                ('points_indirect', models.PositiveSmallIntegerField(default=10, verbose_name='indirect points')),
                ('respawn_count', models.PositiveSmallIntegerField(default=32767, verbose_name='respawn count')),
                ('respawn_time', models.DurationField(default=datetime.timedelta(seconds=21600), verbose_name='respawn time')),
                ('respawn_start', models.BooleanField(default=True, verbose_name='global respawn on start')),
                ('respawn_end', models.BooleanField(default=True, verbose_name='global respawn on end')),
                ('respawn_delay', models.DurationField(default=datetime.timedelta(seconds=1800), verbose_name='end respawn delay')),
                ('protect_flags', models.BooleanField(default=False, verbose_name='prevent flag transfers')),
            ],
        ),
        migrations.CreateModel(
            name='EventScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_start', models.DurationField(default=datetime.timedelta(0), verbose_name='event start offset')),
                ('event_duration', models.DurationField(default=datetime.timedelta(seconds=3600), verbose_name='event duration')),
                ('event_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.configscript')),
            ],
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='flag name')),
                ('visibility', models.CharField(choices=[('EVR', 'Everyone'), ('SHR', 'Shared'), ('HID', 'Hidden')], default='EVR', max_length=3, verbose_name='flag visibility')),
                ('friendly', models.BooleanField(default=False, verbose_name='flag friendly')),
                ('allowed_melee', models.BooleanField(default=True, verbose_name='allow melee')),
                ('allowed_thrown', models.BooleanField(default=True, verbose_name='allow thrown')),
                ('allowed_ranged', models.BooleanField(default=True, verbose_name='allow ranged')),
                ('allowed_animal', models.BooleanField(default=True, verbose_name='allow animal')),
                ('allowed_costume', models.BooleanField(default=True, verbose_name='allow costume')),
                ('multiplier_melee', models.FloatField(default=1, verbose_name='melee multiplier')),
                ('multiplier_thrown', models.FloatField(default=1, verbose_name='thrown multiplier')),
                ('multiplier_ranged', models.FloatField(default=1, verbose_name='ranged multiplier')),
                ('multiplier_animal', models.FloatField(default=1, verbose_name='animal multiplier')),
                ('multiplier_costume', models.FloatField(default=1, verbose_name='costume multiplier')),
                ('bonus_melee', models.FloatField(default=0, verbose_name='melee bonus')),
                ('bonus_thrown', models.FloatField(default=0, verbose_name='thrown bonus')),
                ('bonus_ranged', models.FloatField(default=0, verbose_name='ranged bonus')),
                ('bonus_animal', models.FloatField(default=0, verbose_name='animal bonus')),
                ('bonus_costume', models.FloatField(default=0, verbose_name='costume bonus')),
                ('allowed_normal', models.BooleanField(default=True, verbose_name='allow normal')),
                ('allowed_raid', models.BooleanField(default=True, verbose_name='allow raid')),
                ('allowed_duel', models.BooleanField(default=True, verbose_name='allow duel')),
                ('multiplier_normal', models.FloatField(default=1, verbose_name='normal multiplier')),
                ('multiplier_raid', models.FloatField(default=1, verbose_name='raid multiplier')),
                ('multiplier_duel', models.FloatField(default=1, verbose_name='duel multiplier')),
                ('bonus_raid', models.FloatField(default=0, verbose_name='raid bonus')),
                ('bonus_normal', models.FloatField(default=0, verbose_name='normal bonus')),
                ('bonus_duel', models.FloatField(default=0, verbose_name='duel bonus')),
                ('allowed_indirect', models.BooleanField(default=True, verbose_name='allow indirect')),
                ('multiplier_indirect', models.FloatField(default=1, verbose_name='indirect multiplier')),
                ('bonus_indirect', models.FloatField(default=0, verbose_name='indirect bonus')),
                ('on_kill', models.CharField(choices=[('KNP', 'Keep'), ('LNP', 'Lose'), ('KAP', 'Keep and Pass'), ('LAP', 'Lose and Pass')], default='KNP', max_length=3, verbose_name='action on kill')),
                ('on_death', models.CharField(choices=[('KNP', 'Keep'), ('LNP', 'Lose'), ('KAP', 'Keep and Pass'), ('LAP', 'Lose and Pass')], default='KNP', max_length=3, verbose_name='action on death')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='game title')),
                ('description', models.TextField(verbose_name='description')),
                ('game_start', models.DateTimeField(default=datetime.datetime.today, help_text='Format:  yyyy-mm-dd hh:mm:ss', verbose_name='game start')),
                ('game_duration', models.DurationField(default=datetime.timedelta(days=7), help_text='Format:  d hh:mm:ss', verbose_name='game duration')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alive', models.BooleanField(default=False, verbose_name='is alive')),
                ('game_respawns', models.PositiveSmallIntegerField(verbose_name='game respawns')),
                ('event_respawns', models.PositiveSmallIntegerField(verbose_name='event respawns')),
                ('next_respawn', models.DateTimeField(verbose_name='next respawn')),
                ('assassin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='account.assassin')),
                ('flags', models.ManyToManyField(to='games.flag', verbose_name='player flags')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.game')),
            ],
        ),
        migrations.CreateModel(
            name='XASGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=100, verbose_name='group reference')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('umpire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.assassin')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now, verbose_name='date given')),
                ('points', models.PositiveSmallIntegerField(default=0, verbose_name='bonus')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.player')),
            ],
        ),
        migrations.CreateModel(
            name='IndirectReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=256, verbose_name='trap location')),
                ('date_set', models.DateTimeField(default=datetime.datetime.now, verbose_name='trap laid')),
                ('date_sprung', models.DateTimeField(blank=True, null=True, verbose_name='trap sprung')),
                ('trapper_report', models.TextField(blank=True, null=True, verbose_name='trapper report')),
                ('target_report', models.TextField(blank=True, null=True, verbose_name='target report')),
                ('trap_sprung', models.BooleanField(default=False, verbose_name='trap sprung')),
                ('trap_successful', models.BooleanField(default=False, verbose_name='trap successful')),
                ('target', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traps_recieved', to='games.player')),
                ('trapper', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traps_set', to='games.player')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=256, verbose_name='report location')),
                ('date', models.DateTimeField(default=datetime.datetime.now, verbose_name='report date')),
                ('report_text', models.TextField(verbose_name='report')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.player')),
            ],
        ),
        migrations.CreateModel(
            name='GameScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_scripts', models.ManyToManyField(to='games.eventscript')),
                ('primary_script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.configscript')),
                ('xas_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.xasgroup')),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='game_script',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='games.gamescript'),
        ),
        migrations.AddField(
            model_name='game',
            name='xas_group',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='games.xasgroup'),
        ),
        migrations.CreateModel(
            name='FlagBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now, verbose_name='date given')),
                ('points', models.PositiveSmallIntegerField(default=0, verbose_name='bonus')),
                ('flag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.flag')),
            ],
        ),
        migrations.AddField(
            model_name='flag',
            name='xas_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.xasgroup'),
        ),
        migrations.AddField(
            model_name='eventscript',
            name='xas_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.xasgroup'),
        ),
        migrations.CreateModel(
            name='DirectReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weapon', models.CharField(choices=[('MEL', 'Melee'), ('THR', 'Thrown'), ('RNG', 'Ranged'), ('ATK', 'Attack Animal'), ('COS', 'Costume')], default='MEL', max_length=3, verbose_name='kill weapon')),
                ('context', models.CharField(choices=[('NOR', 'Normal'), ('RAD', 'Raid'), ('DUL', 'Duel')], default='NOR', max_length=3, verbose_name='kill context')),
                ('location', models.CharField(max_length=256, verbose_name='kill location')),
                ('kill_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='kill date')),
                ('killer_report', models.TextField(blank=True, null=True, verbose_name='killer report')),
                ('victim_report', models.TextField(blank=True, null=True, verbose_name='victim report')),
                ('killer_validated', models.BooleanField(default=False, verbose_name='killer validated')),
                ('victim_validated', models.BooleanField(default=False, verbose_name='victim validated')),
                ('confirm_date', models.DateTimeField(null=True, verbose_name='confirm date')),
                ('killer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kills', to='games.player')),
                ('victim', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deaths', to='games.player')),
            ],
        ),
        migrations.AddField(
            model_name='configscript',
            name='xas_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.xasgroup'),
        ),
    ]
